<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>摸鱼云PCDN技术和应用简介</title>
      <link href="/2022/05/25/%E6%91%B8%E9%B1%BC%E4%BA%91PCDN%E6%8A%80%E6%9C%AF%E5%92%8C%E5%BA%94%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/05/25/%E6%91%B8%E9%B1%BC%E4%BA%91PCDN%E6%8A%80%E6%9C%AF%E5%92%8C%E5%BA%94%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PCDN技术和应用简介"><a href="#PCDN技术和应用简介" class="headerlink" title="PCDN技术和应用简介"></a>PCDN技术和应用简介</h1><img src="https://s1.328888.xyz/2022/05/25/lcwHO.png"><blockquote><p><strong>摸鱼云网络科技有限公司</strong></p></blockquote><h2 id="PCDN-原理介绍"><a href="#PCDN-原理介绍" class="headerlink" title="PCDN 原理介绍"></a><code>PCDN</code> 原理介绍</h2><h3 id="PCDN-理解"><a href="#PCDN-理解" class="headerlink" title="PCDN 理解"></a><code>PCDN</code> 理解</h3><ul><li><code>PCDN</code> 即 <strong>点对点内容分发网络</strong> 。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。 <strong>和传统CDN不同的是，PCDN采用电信运营商PPPoE闲置宽带进行汇聚分发，其成本远远低于传统CDN系统。</strong></li></ul><h4 id="PCDN"><a href="#PCDN" class="headerlink" title="PCDN"></a><code>PCDN</code></h4><h5 id="内容（对象）"><a href="#内容（对象）" class="headerlink" title="内容（对象）"></a>内容（对象）</h5><ul><li>页面： <code>htm</code> 、 <code>html</code> 、 <code>shtml</code> 等</li><li>图片： <code>jpg</code> 、 <code>gif</code> 、 <code>png</code> 等</li><li>样式脚本： <code>css</code> 、 <code>js</code> 、 <code>xml</code> 等</li><li>流媒体： <code>mp3</code> 、 <code>flv</code> 、 <code>wmv</code> 、 <code>3gp</code> 等</li></ul><h5 id="分发（方法）"><a href="#分发（方法）" class="headerlink" title="分发（方法）"></a>分发（方法）</h5><ul><li>主动分发：<strong>分发控制器去源站抓取</strong> 和 <strong>提供用户上传接口</strong>  </li><li>被动抓取：<strong>缓存设备</strong> 和 <strong>软件</strong></li></ul><h5 id="网络（载体）"><a href="#网络（载体）" class="headerlink" title="网络（载体）"></a>网络（载体）</h5><ul><li>基础运营商： <code>电信</code> 、 <code>联通</code> 、 <code>移动</code>  </li><li>专门服务提供商: <code>抖音</code> 、 <code>B站</code> 、 <code>爱奇艺</code> 等</li><li>提供 <code>PCDN</code> 服务的运营商: <code>网心云</code> 、 <code>白山云</code> 等</li></ul><h3 id="PCDN-工作原理（-以DNS重定向为例-）"><a href="#PCDN-工作原理（-以DNS重定向为例-）" class="headerlink" title="PCDN 工作原理（ 以DNS重定向为例 ）"></a><code>PCDN</code> 工作原理（ <strong>以DNS重定向为例</strong> ）</h3><h4 id="PCDN-部署前"><a href="#PCDN-部署前" class="headerlink" title="PCDN 部署前"></a><code>PCDN</code> 部署前</h4><blockquote><p><strong>用户完成解析请求后直接向</strong> <code>web</code> <strong>服务器请求数据</strong>  </p></blockquote><img src="https://s1.328888.xyz/2022/05/25/lm5zR.png"><h4 id="PCDN-部署后"><a href="#PCDN-部署后" class="headerlink" title="PCDN 部署后"></a><code>PCDN</code> 部署后</h4><blockquote><p><strong>用户发送解析请求</strong> <code>PCDN</code> <strong>智能路由系统处理</strong> <strong>后最合适的PCDN节点向用户返回数据</strong></p></blockquote><img src="https://s1.328888.xyz/2022/05/25/lm03J.png"><h2 id="PCDN-关键技术"><a href="#PCDN-关键技术" class="headerlink" title="PCDN 关键技术"></a><code>PCDN</code> 关键技术</h2><ul><li><code>PCDN</code> 关键技术</li></ul><img src="https://s1.328888.xyz/2022/05/25/lmkE2.png"><h3 id="内容路由技术"><a href="#内容路由技术" class="headerlink" title="内容路由技术"></a>内容路由技术</h3><blockquote><p><code>PCDN</code> 负载均衡系统实现 <code>PCDN</code> 的内容路由功能。它的作用是将用户的请求导向整个 <code>PCDN</code> 网络中的最佳节点。<br>分为两个层次: <code>全局负载均衡(GSLB)</code> 和 <code>本地负载均衡(SLB)</code><br>主要实现方法包括 <code>DNS</code> 、 <code>应用层重定向</code> 、 <code>传输层重定向</code> 等等。</p></blockquote><h3 id="内容分发技术"><a href="#内容分发技术" class="headerlink" title="内容分发技术"></a>内容分发技术</h3><blockquote><p>包含从内容源到 <code>PCDN</code> 边缘的 <code>Cache</code> 的过程。从实现上看，有两种主流的内容分发技术: <code>PUSH</code> 和 <code>PULL</code> 。</p><p><code>PUSH</code> 是一种主动分发的技术。通常由内容管理系统发起，将内容从源或者中心媒体资源库分发到各边缘的 <code>Cache</code> 节点,采用 <code>智能分发</code> 。</p><p><code>PULL</code> 是一种被动的分发技术。通常由用户请求驱动。当用户请求的内容在本地的边缘 <code>Cache</code> 上不存在(未命中)时， <code>Cache</code> 启动 <code>PULL</code> 方法从内容源或者其他 <code>PCDN</code> 节点实时获取内容，采用 <code>按需分发</code> 。</p></blockquote><h3 id="内容存储技术"><a href="#内容存储技术" class="headerlink" title="内容存储技术"></a>内容存储技术</h3><blockquote><p>包含 <code>内容源</code> 的存储和 <code>内容在Cache节点中</code> 的存储及存储的可靠性。</p><p>对于内容源的存储，由于内容的规模和吞吐量比较大通常采用海量存储架构。如 <code>NAS</code> 和 <code>SON</code> 。 </p><p>对于 <code>Cache</code> 节点中的存储，主要考虑功能和性能方面:在功能上包括对各种内容格式的支持、对部分缓存的支持，在性能上包括 <strong>支持的容量</strong> 、 <strong>多文件吞吐率</strong> 、 <strong>可靠性</strong> 、 <strong>稳定性</strong> 。</p></blockquote><h3 id="内容管理技术"><a href="#内容管理技术" class="headerlink" title="内容管理技术"></a>内容管理技术</h3><blockquote><p>主要关注内容进入 <code>Cache</code> 点后的内容管理，即 <code>本地内容管理</code> 。主要目标是提高内容服务的 <code>效率</code> ，提高本地节点的 <code>存储利用率</code> 。</p><p>主要包括如下三个方面：</p><ul><li>本地内容 <strong>索引</strong> 。</li><li>本地内容 <strong>拷贝</strong> 。</li><li>本地内容访问状态 <strong>信息收集</strong> 。</li></ul></blockquote><h2 id="PCDN-应用领域"><a href="#PCDN-应用领域" class="headerlink" title="PCDN 应用领域"></a><code>PCDN</code> 应用领域</h2><blockquote><p>互联网应用不断发生变迁</p><ul><li>流媒体应用</li><li>视频直播&#x2F;点播</li><li>大文件下载</li><li>B2B交易</li><li>……</li></ul></blockquote><blockquote><p><code>PCDN</code> 业务功能不断更新</p><ul><li><code>网页加速</code></li><li>应用加速</li><li><code>视频加速</code></li><li>网络存储</li><li>下载性能提升</li><li>流量管理</li></ul></blockquote><blockquote><p><code>PCDN</code> 应用领域不断扩展<br><code>门户网站</code><br>社交网站<br>电子商务网站<br>视频网站<br><code>IPTV</code></p></blockquote><h3 id="热门应用——视频分发"><a href="#热门应用——视频分发" class="headerlink" title="热门应用——视频分发"></a>热门应用——视频分发</h3><ul><li>视频分发是大多数 <code>PCDN</code> 提供的关键服务之一</li></ul><blockquote><p>视频分发服务成为 <code>PCDN</code> 应用的热点</p><blockquote><p>提供视频内容服务的网站兴起</p><ul><li>2005年开始大量媒体及娱乐网站陆续开发视频应用用户可自行创建并上传视频的网站纷纷建立</li></ul></blockquote><blockquote><p><code>IPTV</code> 三网融合及在线视频的业务兴起</p><ul><li>2005年国家开始大力推行三网融合 <code>IPTV</code> 业务各大运营商均逐步发展相关业务</li></ul></blockquote><blockquote><p>IP网无法很好支持流媒体内容传送</p><ul><li>传统网络模型和业务模型难以满足流媒体的需要 <code>PCDN</code> 保证 <code>QoS</code> ，缓解流媒体业务对骨干网流量流向的冲击，实现应用层多播，有效缓解对 <code>运营商</code> 和 <code>SP</code> 的接入的压力。</li></ul></blockquote></blockquote><h3 id="竞争分析"><a href="#竞争分析" class="headerlink" title="竞争分析"></a>竞争分析</h3><table><thead><tr><th align="left">服务商</th><th align="left">优势</th><th align="left">劣势</th></tr></thead><tbody><tr><td align="left"><code>专业CDN服务商</code> 代表企业：蓝汛、帝联科技等</td><td align="left">专注核心业务发展，易扩大经营规模  进入市场较早，具有成熟的 <code>运营</code> 机制和较高的 <code>服务</code> 能力</td><td align="left">受制于电信运营商带宽租用费用，带宽 <code>成本</code> 是刚性的，不能形成价格优势。由于电信运营商运营支撑系统的不灵活导致带宽资费设置不灵活，不能按需索取，导致 <code>CDN</code> 的价格居高不下</td></tr><tr><td align="left"><code>提供CDN服务的IDC运营商</code> 代表企业：网宿科技、世纪互联等</td><td align="left">拥有带宽资源优势，进入市场较容易</td><td align="left">需要添置大量的服务器、网络设备及存储设备，投资 <code>成本</code> 高</td></tr><tr><td align="left"><code>提供PCDN的服务商代表企业：摸鱼云、网心云等</code></td><td align="left">&#96;拥有巨量的电信运营商闲置宽带，成本远低于传统CDN，可为上游客户节省大笔开支。&#96;&#96;</td><td align="left">单线程带宽容量较小，非固定IP</td></tr></tbody></table><h2 id="PCDN-网络架构"><a href="#PCDN-网络架构" class="headerlink" title="PCDN 网络架构"></a><code>PCDN</code> 网络架构</h2><h3 id="PCDN-整体网络架构"><a href="#PCDN-整体网络架构" class="headerlink" title="PCDN 整体网络架构"></a><code>PCDN</code> 整体网络架构</h3><img src="https://s1.328888.xyz/2022/05/25/l3JgC.png"><blockquote><p>PCDN Manager</p><ul><li>PCDN网络的管理者</li><li>全局媒体定位</li><li>全局负载均衡</li><li>全局内容调度</li></ul></blockquote><blockquote><p>PCDN Agent</p><ul><li><code>PCDN</code> 节点的管理者</li><li>节点内部的媒体定位</li><li>节点内部的负载均衡</li><li>响应 <code>PCDN</code> <code>Manager</code> 命令</li></ul></blockquote><blockquote><p>Media Server</p><ul><li>存储大量的媒体信息</li><li>响应客户请求</li></ul></blockquote><h3 id="PCDN-系统架构"><a href="#PCDN-系统架构" class="headerlink" title="PCDN 系统架构"></a><code>PCDN</code> 系统架构</h3><img src="https://s1.328888.xyz/2022/05/25/l3mU4.png"><blockquote><p>中心节点：</p><ul><li>全网的内容发布中心，全内容存储点</li><li>服务区域中心未命中的用户</li><li><code>PCDN</code> 网络架构的中心控制单元，为中心 <code>CDN</code> 分担流量压力</li></ul><p><code>PCDN</code> 节点</p><ul><li>服务边缘节点未命中的用户</li><li>作为整个 <code>PCDN</code> 网络架构的二级缓冲，承担部分冗余功能</li></ul><p>用户端</p><ul><li>通过电信运营商宽带线路、城域网，直接分发到对应用户端设备，从而绕过数据中心。</li></ul></blockquote><h3 id="二级架构和三级架构的选择"><a href="#二级架构和三级架构的选择" class="headerlink" title="二级架构和三级架构的选择"></a>二级架构和三级架构的选择</h3><img src="https://s1.328888.xyz/2022/05/25/l3b9Z.png"><blockquote><ul><li><p>二级架构<br>B端建设初期，用户规模较小。一般采用二级架构，在保证用户服务质量的基础上，尽量节约系统建设成本</p></li><li><p>扩展性<br>随着用户的逐渐增加，二级架构在系统容量、可靠性等方面已不能满足需要的情况下，随时可以进行宽带扩展</p></li></ul></blockquote><h1 id="谢谢！"><a href="#谢谢！" class="headerlink" title="谢谢！"></a>谢谢！</h1><img src="https://s1.328888.xyz/2022/05/25/lcwHO.png">]]></content>
      
      
      <categories>
          
          <category> 摸鱼云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摸鱼云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Kivibot】轻量便捷且优雅的Kivi机器人部署教程</title>
      <link href="/2022/05/25/%E3%80%90KiviBot%E3%80%91%E4%BE%BF%E6%8D%B7%E3%80%81%E4%BC%98%E9%9B%85%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/05/25/%E3%80%90KiviBot%E3%80%91%E4%BE%BF%E6%8D%B7%E3%80%81%E4%BC%98%E9%9B%85%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>此项目仅用于学习交流，禁止用于非法用途</strong><br><img src="https://i.loli.net/2021/12/02/ys3M7rITu9lPBUw.png"><br><code>KiviBot</code> 是一个使用 <code>JavaScript</code> 语言编写，基于 <strong><a href="https://github.com/takayama-lily/oicq">oicq</a></strong> ，并修改和优化于 <strong><a href="https://github.com/takayama-lily/abot">abot</a></strong> 的<strong>轻量</strong>、<strong>跨平台</strong>的 QQ 机器人框架。  </p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>确保<strong>系统</strong>的相同，是减少麻烦的最有效途径</li><li>很多操作你很有可能之前从来没有接触过</li><li>遇到<strong>问题</strong>不要慌，先检查是不是漏了<strong>亿步</strong></li><li>框架还处于<strong>测试阶段</strong>，教程可能<strong>不会</strong>及时更新。</li><li>遇到问题请<strong>先尝试找搜索引擎解决</strong>，实在解决不了的可以<a href="https://jq.qq.com/?_wv=1027&k=OuXggnBs" title="Vikiの小圈子">加入群聊</a>礼貌提问</li></ol><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="必要的环境安装"><a href="#必要的环境安装" class="headerlink" title="必要的环境安装"></a>必要的环境安装</h2><h3 id="下载框架文件"><a href="#下载框架文件" class="headerlink" title="下载框架文件"></a>下载框架文件</h3><blockquote><p>还没有加群？点此<a href="https://jq.qq.com/?_wv=1027&k=OuXggnBs" title="Vikiの小圈子">加入群聊</a>。若链接无效，可手动搜索群号：<code>296732038</code>  </p></blockquote><ul><li><p>请到框架交流群<strong>群文件</strong>的 <code>KiviBot 框架与插件</code> 文件夹下载框架文件</p></li><li><p>文件名：<code>KiviBot 0.8.0.zip</code> 请<strong>解压后</strong>再进行下面操作</p></li></ul><h3 id="下载安装-node"><a href="#下载安装-node" class="headerlink" title="下载安装 node"></a><strong>下载安装 <code>node</code></strong></h3><ul><li><p><code>node</code> 是 <code>JavaScript</code> 的一个运行环境，推荐从 <strong><a href="https://nodejs.org/zh-cn/">官网</a></strong> 下载。</p></li><li><p>下载完后<strong>运行安装包</strong>，并一直点击下一步直至<strong>完成安装</strong>。</p></li></ul><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><ul><li><p>打开框架文件夹（解压框架压缩包后的文件夹，目录下有 <code>package.json</code> 文件），并在 <code>框架文件夹的地址栏</code> 输入 <code>cmd</code> 并回车</p></li><li><p>在弹出的黑框（命令行终端）中依次输入 <code>node -v</code> 和 <code>npm -v</code> 并回车来测试 <code>node</code> 是否安装成功</p></li></ul><blockquote><p>请务必注意，要在<strong>框架文件夹的地址栏</strong>中打开 cmd 命令行。</p></blockquote><ul><li>如果正确输出了版本号，则说明 <code>node</code> 及附带的 <code>npm</code> 包管理工具安装成功，且环境变量自动配置好了</li></ul><img src="https://s1.328888.xyz/2022/05/25/ltzLM.png"><h3 id="安装框架依赖"><a href="#安装框架依赖" class="headerlink" title="安装框架依赖"></a>安装框架依赖</h3><ul><li>按上述方式打开命令行终端，输入并执行以下命令，来更换 npm 国内镜像源</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><blockquote><p>当终端命令行正在执行一些操作时，一般情况下按 <code>Ctrl</code> + <code>C</code> 组合键可以强制退出当前操作</p></blockquote><ul><li>更换完后输入命令 <code>npm i</code> 安装框架依赖文件</li></ul><h3 id="全局安装进程管理器-pm2"><a href="#全局安装进程管理器-pm2" class="headerlink" title="全局安装进程管理器 pm2"></a>全局安装进程管理器 <code>pm2</code></h3><ul><li><p><code>pm2</code> 是一个进程管理器，可用于部署与管理 <code>JavaScript</code> 应用程序</p></li><li><p>这里推荐使用它来部署和管理框架，输入并执行以下命令来全局安装 <code>pm2</code></p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure><h3 id="配置-ffmpeg-（可选）"><a href="#配置-ffmpeg-（可选）" class="headerlink" title="配置 ffmpeg （可选）"></a>配置 <code>ffmpeg</code> （可选）</h3><ul><li><p>如果只是想尝试框架，不需要发送语音和视频的功能，可跳过此步骤</p></li><li><p>到群文件或 <strong><a href="https://viki.lanzouo.com/i5WKKx36gle">点此</a></strong> 下载最新 <code>ffmpeg</code> 压缩包，解压，并将解压后的 <code>bin</code> 目录添加到 系统环境变量 的 <code>Path</code> 字段里</p></li><li><p>打开终端，并输入 ffmpeg -version 命令测试是否配置成功。如果出现版本提示且未报错，则配置成功</p></li></ul><blockquote><p>如何打开系统环境变量可参考： <a href="https://jingyan.baidu.com/article/358570f69e8a13ce4724fcf8.html">Windows 如何配置环境变量，添加 Path - 百度经验</a>，具体操作方式随着操作系统版本的不同而存在差异</p></blockquote><img src="https://s1.328888.xyz/2022/05/25/l5VaZ.png"><h3 id="验证账号"><a href="#验证账号" class="headerlink" title="验证账号"></a>验证账号</h3><blockquote><p>首次运行框架，请将上述的<code>命令行终端最大化</code>后执行以下命令，根据提示完成框架配置和登录验证流程</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><ul><li><p>期间可能会要求扫码、短信验证码或者滑块等，因账号而异。如果收到了上线通知，则说明账号验证成功</p></li><li><p>账号验证成功成功后，按 <code>Ctrl</code> + <code>C</code> 组合键退出当前账号验证环境</p></li></ul><blockquote><p>请勿关闭命令行窗口</p></blockquote><h3 id="部署框架"><a href="#部署框架" class="headerlink" title="部署框架"></a>部署框架</h3><ul><li>上一步完成后，输入并执行以下命令，将框架作为后台进程启动，此时就算关闭了终端窗口，机器人框架依然在运行</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><ul><li>账号信息只需记录一次，除了修改密码、被冻结或者强制下线外，都不需要再次重新验证账号</li></ul><blockquote><p>当命令行输入 <code>npm start</code> 时，只是临时启动框架，仅用于测试和通过首次登录流程，如果这个时候关闭终端窗口，框架也会随之停止</p></blockquote><ul><li>下表说明了各个终端命令的用途与异同</li></ul><table><thead><tr><th align="left">命令</th><th align="left">功能与说明</th></tr></thead><tbody><tr><td align="left"><code>npm start</code></td><td align="left">第一次启动或者临时启动时执行，用于第一次账号信息验证，当终端退出时框架也会退出</td></tr><tr><td align="left"><code>npm run deploy</code></td><td align="left">使用 <code>pm2</code> 将最新框架代码部署在后台，当终端退出时框架依然运行在后台</td></tr><tr><td align="left"><code>npm run log</code></td><td align="left">查看 <code>pm2</code> 的框架消息日志与调试信息，随时看随时开，也可以一直打开</td></tr><tr><td align="left"><code>npm run stop</code></td><td align="left">停止 <code>pm2</code> 已经部署的框架进程（停止并关闭框架）</td></tr><tr><td align="left"><code>npm run delete</code></td><td align="left">从 <code>pm2</code> 进程列表中删除框架进程，需要先停止进程</td></tr></tbody></table><blockquote><p>如果账号由于某些原因被冻结或者强制下线，此时需要按照以下流程重新登录。</p><ol><li>输入 <code>npm run stop</code> 停止框架。</li><li>输入 <code>npm run start</code> 进入验证流程并重新验证账号。</li><li><code>Ctrl</code> + <code>C</code> 组合键退出账号验证环境</li><li>输入 <code>npm run deploy</code> 重新部署框架。</li></ol></blockquote><blockquote><p>好啦，便捷优雅的KiviBot已部署完成，快向机器人发送 <code>#帮助</code> 查看所有指令叭</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bot </tag>
            
            <tag> Kivi </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
